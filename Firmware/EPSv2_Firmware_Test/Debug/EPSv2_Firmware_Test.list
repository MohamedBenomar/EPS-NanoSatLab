
EPSv2_Firmware_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012c4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001490  08001490  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001490  08001490  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001490  08001490  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001490  08001490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001494  08001494  00011494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080014a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080014a4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f19  00000000  00000000  00024c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f8  00000000  00000000  00025b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000470  00000000  00000000  00026080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017caf  00000000  00000000  000264f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004fa0  00000000  00000000  0003e19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a3f  00000000  00000000  0004313f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9b7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011fc  00000000  00000000  000d9bd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001438 	.word	0x08001438

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001438 	.word	0x08001438

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 f913 	bl	80003fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f803 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f848 	bl	800026c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x10>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2244      	movs	r2, #68	; 0x44
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f001 f91b 	bl	8001428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	463b      	mov	r3, r7
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]
 80001f8:	605a      	str	r2, [r3, #4]
 80001fa:	609a      	str	r2, [r3, #8]
 80001fc:	60da      	str	r2, [r3, #12]
 80001fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000200:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000204:	f000 fa62 	bl	80006cc <HAL_PWREx_ControlVoltageScaling>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800020e:	f000 f845 	bl	800029c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000212:	2310      	movs	r3, #16
 8000214:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800021e:	2360      	movs	r3, #96	; 0x60
 8000220:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	4618      	mov	r0, r3
 800022c:	f000 faa4 	bl	8000778 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000236:	f000 f831 	bl	800029c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	463b      	mov	r3, r7
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fef6 	bl	8001044 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800025e:	f000 f81d 	bl	800029c <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3758      	adds	r7, #88	; 0x58
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <MX_GPIO_Init+0x2c>)
 8000274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000276:	4a08      	ldr	r2, [pc, #32]	; (8000298 <MX_GPIO_Init+0x2c>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800027e:	4b06      	ldr	r3, [pc, #24]	; (8000298 <MX_GPIO_Init+0x2c>)
 8000280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000

0800029c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002a0:	b672      	cpsid	i
}
 80002a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <Error_Handler+0x8>
	...

080002a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002ae:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <HAL_MspInit+0x44>)
 80002b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <HAL_MspInit+0x44>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6613      	str	r3, [r2, #96]	; 0x60
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <HAL_MspInit+0x44>)
 80002bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <HAL_MspInit+0x44>)
 80002c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002ca:	4a08      	ldr	r2, [pc, #32]	; (80002ec <HAL_MspInit+0x44>)
 80002cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002d0:	6593      	str	r3, [r2, #88]	; 0x58
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <HAL_MspInit+0x44>)
 80002d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002da:	603b      	str	r3, [r7, #0]
 80002dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000

080002f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <NMI_Handler+0x4>

080002f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002fa:	e7fe      	b.n	80002fa <HardFault_Handler+0x4>

080002fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <MemManage_Handler+0x4>

08000302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000306:	e7fe      	b.n	8000306 <BusFault_Handler+0x4>

08000308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800030c:	e7fe      	b.n	800030c <UsageFault_Handler+0x4>

0800030e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000312:	bf00      	nop
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr

0800031c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr

0800032a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800033c:	f000 f8b2 	bl	80004a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}

08000344 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <SystemInit+0x5c>)
 800034a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800034e:	4a14      	ldr	r2, [pc, #80]	; (80003a0 <SystemInit+0x5c>)
 8000350:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <SystemInit+0x60>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <SystemInit+0x60>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <SystemInit+0x60>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <SystemInit+0x60>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <SystemInit+0x60>)
 8000370:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000374:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000378:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <SystemInit+0x60>)
 800037c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000380:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <SystemInit+0x60>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <SystemInit+0x60>)
 8000388:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800038c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800038e:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SystemInit+0x60>)
 8000390:	2200      	movs	r2, #0
 8000392:	619a      	str	r2, [r3, #24]
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	40021000 	.word	0x40021000

080003a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003ac:	f7ff ffca 	bl	8000344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80003b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80003b2:	e003      	b.n	80003bc <LoopCopyDataInit>

080003b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80003b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80003b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80003ba:	3104      	adds	r1, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80003be:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80003c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80003c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80003c4:	d3f6      	bcc.n	80003b4 <CopyDataInit>
	ldr	r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80003c8:	e002      	b.n	80003d0 <LoopFillZerobss>

080003ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80003ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80003cc:	f842 3b04 	str.w	r3, [r2], #4

080003d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <LoopForever+0x16>)
	cmp	r2, r3
 80003d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80003d4:	d3f9      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d6:	f001 f803 	bl	80013e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003da:	f7ff fef7 	bl	80001cc <main>

080003de <LoopForever>:

LoopForever:
    b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003e0:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80003e4:	08001498 	.word	0x08001498
	ldr	r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80003ec:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80003f0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80003f4:	2000002c 	.word	0x2000002c

080003f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC1_2_IRQHandler>

080003fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000400:	2300      	movs	r3, #0
 8000402:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000404:	2003      	movs	r0, #3
 8000406:	f000 f91f 	bl	8000648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800040a:	2000      	movs	r0, #0
 800040c:	f000 f80e 	bl	800042c <HAL_InitTick>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d002      	beq.n	800041c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000416:	2301      	movs	r3, #1
 8000418:	71fb      	strb	r3, [r7, #7]
 800041a:	e001      	b.n	8000420 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800041c:	f7ff ff44 	bl	80002a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000420:	79fb      	ldrb	r3, [r7, #7]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000438:	4b17      	ldr	r3, [pc, #92]	; (8000498 <HAL_InitTick+0x6c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d023      	beq.n	8000488 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000440:	4b16      	ldr	r3, [pc, #88]	; (800049c <HAL_InitTick+0x70>)
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <HAL_InitTick+0x6c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	4619      	mov	r1, r3
 800044a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000452:	fbb2 f3f3 	udiv	r3, r2, r3
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f91d 	bl	8000696 <HAL_SYSTICK_Config>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d10f      	bne.n	8000482 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b0f      	cmp	r3, #15
 8000466:	d809      	bhi.n	800047c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000468:	2200      	movs	r2, #0
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000470:	f000 f8f5 	bl	800065e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000474:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <HAL_InitTick+0x74>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6013      	str	r3, [r2, #0]
 800047a:	e007      	b.n	800048c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800047c:	2301      	movs	r3, #1
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e004      	b.n	800048c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	73fb      	strb	r3, [r7, #15]
 8000486:	e001      	b.n	800048c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000488:	2301      	movs	r3, #1
 800048a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800048c:	7bfb      	ldrb	r3, [r7, #15]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000008 	.word	0x20000008
 800049c:	20000000 	.word	0x20000000
 80004a0:	20000004 	.word	0x20000004

080004a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_IncTick+0x20>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_IncTick+0x24>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4413      	add	r3, r2
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <HAL_IncTick+0x24>)
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	20000008 	.word	0x20000008
 80004c8:	20000028 	.word	0x20000028

080004cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return uwTick;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_GetTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000028 	.word	0x20000028

080004e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f003 0307 	and.w	r3, r3, #7
 80004f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <__NVIC_SetPriorityGrouping+0x44>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000500:	4013      	ands	r3, r2
 8000502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800050c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000516:	4a04      	ldr	r2, [pc, #16]	; (8000528 <__NVIC_SetPriorityGrouping+0x44>)
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	60d3      	str	r3, [r2, #12]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <__NVIC_GetPriorityGrouping+0x18>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	f003 0307 	and.w	r3, r3, #7
}
 800053a:	4618      	mov	r0, r3
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	6039      	str	r1, [r7, #0]
 8000552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000558:	2b00      	cmp	r3, #0
 800055a:	db0a      	blt.n	8000572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	b2da      	uxtb	r2, r3
 8000560:	490c      	ldr	r1, [pc, #48]	; (8000594 <__NVIC_SetPriority+0x4c>)
 8000562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000566:	0112      	lsls	r2, r2, #4
 8000568:	b2d2      	uxtb	r2, r2
 800056a:	440b      	add	r3, r1
 800056c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000570:	e00a      	b.n	8000588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	b2da      	uxtb	r2, r3
 8000576:	4908      	ldr	r1, [pc, #32]	; (8000598 <__NVIC_SetPriority+0x50>)
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f003 030f 	and.w	r3, r3, #15
 800057e:	3b04      	subs	r3, #4
 8000580:	0112      	lsls	r2, r2, #4
 8000582:	b2d2      	uxtb	r2, r2
 8000584:	440b      	add	r3, r1
 8000586:	761a      	strb	r2, [r3, #24]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	e000e100 	.word	0xe000e100
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800059c:	b480      	push	{r7}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f003 0307 	and.w	r3, r3, #7
 80005ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005b0:	69fb      	ldr	r3, [r7, #28]
 80005b2:	f1c3 0307 	rsb	r3, r3, #7
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	bf28      	it	cs
 80005ba:	2304      	movcs	r3, #4
 80005bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005be:	69fb      	ldr	r3, [r7, #28]
 80005c0:	3304      	adds	r3, #4
 80005c2:	2b06      	cmp	r3, #6
 80005c4:	d902      	bls.n	80005cc <NVIC_EncodePriority+0x30>
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	3b03      	subs	r3, #3
 80005ca:	e000      	b.n	80005ce <NVIC_EncodePriority+0x32>
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	43da      	mvns	r2, r3
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	401a      	ands	r2, r3
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43d9      	mvns	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	4313      	orrs	r3, r2
         );
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3724      	adds	r7, #36	; 0x24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3b01      	subs	r3, #1
 8000610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000614:	d301      	bcc.n	800061a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000616:	2301      	movs	r3, #1
 8000618:	e00f      	b.n	800063a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <SysTick_Config+0x40>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3b01      	subs	r3, #1
 8000620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000622:	210f      	movs	r1, #15
 8000624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000628:	f7ff ff8e 	bl	8000548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <SysTick_Config+0x40>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <SysTick_Config+0x40>)
 8000634:	2207      	movs	r2, #7
 8000636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	e000e010 	.word	0xe000e010

08000648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff47 	bl	80004e4 <__NVIC_SetPriorityGrouping>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b086      	sub	sp, #24
 8000662:	af00      	add	r7, sp, #0
 8000664:	4603      	mov	r3, r0
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000670:	f7ff ff5c 	bl	800052c <__NVIC_GetPriorityGrouping>
 8000674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	68b9      	ldr	r1, [r7, #8]
 800067a:	6978      	ldr	r0, [r7, #20]
 800067c:	f7ff ff8e 	bl	800059c <NVIC_EncodePriority>
 8000680:	4602      	mov	r2, r0
 8000682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff5d 	bl	8000548 <__NVIC_SetPriority>
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f7ff ffb0 	bl	8000604 <SysTick_Config>
 80006a4:	4603      	mov	r3, r0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40007000 	.word	0x40007000

080006cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006da:	d130      	bne.n	800073e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e8:	d038      	beq.n	800075c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2232      	movs	r2, #50	; 0x32
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000706:	fba2 2303 	umull	r2, r3, r2, r3
 800070a:	0c9b      	lsrs	r3, r3, #18
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000710:	e002      	b.n	8000718 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3b01      	subs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000724:	d102      	bne.n	800072c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1f2      	bne.n	8000712 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000738:	d110      	bne.n	800075c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800073a:	2303      	movs	r3, #3
 800073c:	e00f      	b.n	800075e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800074a:	d007      	beq.n	800075c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800075a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40007000 	.word	0x40007000
 8000770:	20000000 	.word	0x20000000
 8000774:	431bde83 	.word	0x431bde83

08000778 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d102      	bne.n	800078c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	f000 bc56 	b.w	8001038 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800078c:	4ba1      	ldr	r3, [pc, #644]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	f003 030c 	and.w	r3, r3, #12
 8000794:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000796:	4b9f      	ldr	r3, [pc, #636]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f003 0303 	and.w	r3, r3, #3
 800079e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f000 80e6 	beq.w	800097a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d007      	beq.n	80007c4 <HAL_RCC_OscConfig+0x4c>
 80007b4:	6a3b      	ldr	r3, [r7, #32]
 80007b6:	2b0c      	cmp	r3, #12
 80007b8:	f040 808d 	bne.w	80008d6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	f040 8089 	bne.w	80008d6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007c4:	4b93      	ldr	r3, [pc, #588]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <HAL_RCC_OscConfig+0x66>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	69db      	ldr	r3, [r3, #28]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d102      	bne.n	80007de <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	f000 bc2d 	b.w	8001038 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007e2:	4b8c      	ldr	r3, [pc, #560]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <HAL_RCC_OscConfig+0x80>
 80007ee:	4b89      	ldr	r3, [pc, #548]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007f6:	e005      	b.n	8000804 <HAL_RCC_OscConfig+0x8c>
 80007f8:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80007fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007fe:	091b      	lsrs	r3, r3, #4
 8000800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000804:	4293      	cmp	r3, r2
 8000806:	d224      	bcs.n	8000852 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fd87 	bl	8001320 <RCC_SetFlashLatencyFromMSIRange>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	f000 bc0d 	b.w	8001038 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800081e:	4b7d      	ldr	r3, [pc, #500]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a7c      	ldr	r2, [pc, #496]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6013      	str	r3, [r2, #0]
 800082a:	4b7a      	ldr	r3, [pc, #488]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000836:	4977      	ldr	r1, [pc, #476]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000838:	4313      	orrs	r3, r2
 800083a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800083c:	4b75      	ldr	r3, [pc, #468]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	4972      	ldr	r1, [pc, #456]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800084c:	4313      	orrs	r3, r2
 800084e:	604b      	str	r3, [r1, #4]
 8000850:	e025      	b.n	800089e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000852:	4b70      	ldr	r3, [pc, #448]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a6f      	ldr	r2, [pc, #444]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	4b6d      	ldr	r3, [pc, #436]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086a:	496a      	ldr	r1, [pc, #424]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800086c:	4313      	orrs	r3, r2
 800086e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000870:	4b68      	ldr	r3, [pc, #416]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	021b      	lsls	r3, r3, #8
 800087e:	4965      	ldr	r1, [pc, #404]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000880:	4313      	orrs	r3, r2
 8000882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000884:	6a3b      	ldr	r3, [r7, #32]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d109      	bne.n	800089e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fd46 	bl	8001320 <RCC_SetFlashLatencyFromMSIRange>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e3cc      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800089e:	f000 fcb3 	bl	8001208 <HAL_RCC_GetSysClockFreq>
 80008a2:	4602      	mov	r2, r0
 80008a4:	4b5b      	ldr	r3, [pc, #364]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	495a      	ldr	r1, [pc, #360]	; (8000a18 <HAL_RCC_OscConfig+0x2a0>)
 80008b0:	5ccb      	ldrb	r3, [r1, r3]
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	fa22 f303 	lsr.w	r3, r2, r3
 80008ba:	4a58      	ldr	r2, [pc, #352]	; (8000a1c <HAL_RCC_OscConfig+0x2a4>)
 80008bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80008be:	4b58      	ldr	r3, [pc, #352]	; (8000a20 <HAL_RCC_OscConfig+0x2a8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fdb2 	bl	800042c <HAL_InitTick>
 80008c8:	4603      	mov	r3, r0
 80008ca:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80008cc:	7dfb      	ldrb	r3, [r7, #23]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d052      	beq.n	8000978 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80008d2:	7dfb      	ldrb	r3, [r7, #23]
 80008d4:	e3b0      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d032      	beq.n	8000944 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80008de:	4b4d      	ldr	r3, [pc, #308]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a4c      	ldr	r2, [pc, #304]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80008ea:	f7ff fdef 	bl	80004cc <HAL_GetTick>
 80008ee:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80008f0:	e008      	b.n	8000904 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008f2:	f7ff fdeb 	bl	80004cc <HAL_GetTick>
 80008f6:	4602      	mov	r2, r0
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d901      	bls.n	8000904 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000900:	2303      	movs	r3, #3
 8000902:	e399      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000904:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	2b00      	cmp	r3, #0
 800090e:	d0f0      	beq.n	80008f2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000910:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000928:	493a      	ldr	r1, [pc, #232]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800092a:	4313      	orrs	r3, r2
 800092c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800092e:	4b39      	ldr	r3, [pc, #228]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	4935      	ldr	r1, [pc, #212]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800093e:	4313      	orrs	r3, r2
 8000940:	604b      	str	r3, [r1, #4]
 8000942:	e01a      	b.n	800097a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000944:	4b33      	ldr	r3, [pc, #204]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a32      	ldr	r2, [pc, #200]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800094a:	f023 0301 	bic.w	r3, r3, #1
 800094e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000950:	f7ff fdbc 	bl	80004cc <HAL_GetTick>
 8000954:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000956:	e008      	b.n	800096a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000958:	f7ff fdb8 	bl	80004cc <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b02      	cmp	r3, #2
 8000964:	d901      	bls.n	800096a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000966:	2303      	movs	r3, #3
 8000968:	e366      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f0      	bne.n	8000958 <HAL_RCC_OscConfig+0x1e0>
 8000976:	e000      	b.n	800097a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b00      	cmp	r3, #0
 8000984:	d073      	beq.n	8000a6e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000986:	6a3b      	ldr	r3, [r7, #32]
 8000988:	2b08      	cmp	r3, #8
 800098a:	d005      	beq.n	8000998 <HAL_RCC_OscConfig+0x220>
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	2b0c      	cmp	r3, #12
 8000990:	d10e      	bne.n	80009b0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d10b      	bne.n	80009b0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d063      	beq.n	8000a6c <HAL_RCC_OscConfig+0x2f4>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d15f      	bne.n	8000a6c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e343      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009b8:	d106      	bne.n	80009c8 <HAL_RCC_OscConfig+0x250>
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e01d      	b.n	8000a04 <HAL_RCC_OscConfig+0x28c>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009d0:	d10c      	bne.n	80009ec <HAL_RCC_OscConfig+0x274>
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	e00b      	b.n	8000a04 <HAL_RCC_OscConfig+0x28c>
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <HAL_RCC_OscConfig+0x29c>)
 80009fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d01b      	beq.n	8000a44 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a0c:	f7ff fd5e 	bl	80004cc <HAL_GetTick>
 8000a10:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a12:	e010      	b.n	8000a36 <HAL_RCC_OscConfig+0x2be>
 8000a14:	40021000 	.word	0x40021000
 8000a18:	08001450 	.word	0x08001450
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a24:	f7ff fd52 	bl	80004cc <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b64      	cmp	r3, #100	; 0x64
 8000a30:	d901      	bls.n	8000a36 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000a32:	2303      	movs	r3, #3
 8000a34:	e300      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a36:	4ba0      	ldr	r3, [pc, #640]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f0      	beq.n	8000a24 <HAL_RCC_OscConfig+0x2ac>
 8000a42:	e014      	b.n	8000a6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a44:	f7ff fd42 	bl	80004cc <HAL_GetTick>
 8000a48:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a4a:	e008      	b.n	8000a5e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a4c:	f7ff fd3e 	bl	80004cc <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	2b64      	cmp	r3, #100	; 0x64
 8000a58:	d901      	bls.n	8000a5e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e2ec      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a5e:	4b96      	ldr	r3, [pc, #600]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1f0      	bne.n	8000a4c <HAL_RCC_OscConfig+0x2d4>
 8000a6a:	e000      	b.n	8000a6e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d060      	beq.n	8000b3c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d005      	beq.n	8000a8c <HAL_RCC_OscConfig+0x314>
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	2b0c      	cmp	r3, #12
 8000a84:	d119      	bne.n	8000aba <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d116      	bne.n	8000aba <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a8c:	4b8a      	ldr	r3, [pc, #552]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d005      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x32c>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d101      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e2c9      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aa4:	4b84      	ldr	r3, [pc, #528]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	061b      	lsls	r3, r3, #24
 8000ab2:	4981      	ldr	r1, [pc, #516]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ab8:	e040      	b.n	8000b3c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d023      	beq.n	8000b0a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ac2:	4b7d      	ldr	r3, [pc, #500]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a7c      	ldr	r2, [pc, #496]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ace:	f7ff fcfd 	bl	80004cc <HAL_GetTick>
 8000ad2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ad4:	e008      	b.n	8000ae8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ad6:	f7ff fcf9 	bl	80004cc <HAL_GetTick>
 8000ada:	4602      	mov	r2, r0
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d901      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e2a7      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ae8:	4b73      	ldr	r3, [pc, #460]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f0      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000af4:	4b70      	ldr	r3, [pc, #448]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	061b      	lsls	r3, r3, #24
 8000b02:	496d      	ldr	r1, [pc, #436]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000b04:	4313      	orrs	r3, r2
 8000b06:	604b      	str	r3, [r1, #4]
 8000b08:	e018      	b.n	8000b3c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b0a:	4b6b      	ldr	r3, [pc, #428]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a6a      	ldr	r2, [pc, #424]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b16:	f7ff fcd9 	bl	80004cc <HAL_GetTick>
 8000b1a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b1c:	e008      	b.n	8000b30 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b1e:	f7ff fcd5 	bl	80004cc <HAL_GetTick>
 8000b22:	4602      	mov	r2, r0
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d901      	bls.n	8000b30 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e283      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b30:	4b61      	ldr	r3, [pc, #388]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1f0      	bne.n	8000b1e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d07f      	beq.n	8000c48 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d05f      	beq.n	8000c10 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8000b50:	4b59      	ldr	r3, [pc, #356]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b56:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	699a      	ldr	r2, [r3, #24]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d037      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e25c      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d01b      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8000b88:	4b4b      	ldr	r3, [pc, #300]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b8e:	4a4a      	ldr	r2, [pc, #296]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000b98:	f7ff fc98 	bl	80004cc <HAL_GetTick>
 8000b9c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b9e:	e008      	b.n	8000bb2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ba0:	f7ff fc94 	bl	80004cc <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b11      	cmp	r3, #17
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e242      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bb2:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1ef      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8000bc0:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bc6:	f023 0210 	bic.w	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	493a      	ldr	r1, [pc, #232]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bd6:	4b38      	ldr	r3, [pc, #224]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bdc:	4a36      	ldr	r2, [pc, #216]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000be6:	f7ff fc71 	bl	80004cc <HAL_GetTick>
 8000bea:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bee:	f7ff fc6d 	bl	80004cc <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b11      	cmp	r3, #17
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e21b      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000c00:	4b2d      	ldr	r3, [pc, #180]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0ef      	beq.n	8000bee <HAL_RCC_OscConfig+0x476>
 8000c0e:	e01b      	b.n	8000c48 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c10:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c16:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c18:	f023 0301 	bic.w	r3, r3, #1
 8000c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c20:	f7ff fc54 	bl	80004cc <HAL_GetTick>
 8000c24:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c26:	e008      	b.n	8000c3a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c28:	f7ff fc50 	bl	80004cc <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	2b11      	cmp	r3, #17
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e1fe      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000c3a:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1ef      	bne.n	8000c28 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 80c1 	beq.w	8000dd8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10e      	bne.n	8000c86 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c72:	6593      	str	r3, [r2, #88]	; 0x58
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_RCC_OscConfig+0x540>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000c80:	2301      	movs	r3, #1
 8000c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_RCC_OscConfig+0x544>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d11c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_RCC_OscConfig+0x544>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <HAL_RCC_OscConfig+0x544>)
 8000c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fc15 	bl	80004cc <HAL_GetTick>
 8000ca2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ca4:	e00c      	b.n	8000cc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca6:	f7ff fc11 	bl	80004cc <HAL_GetTick>
 8000caa:	4602      	mov	r2, r0
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d905      	bls.n	8000cc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e1bf      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000cc0:	4bb1      	ldr	r3, [pc, #708]	; (8000f88 <HAL_RCC_OscConfig+0x810>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d0ec      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d02c      	beq.n	8000d32 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8000cd8:	4bac      	ldr	r3, [pc, #688]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cea:	49a8      	ldr	r1, [pc, #672]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000cec:	4313      	orrs	r3, r2
 8000cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d010      	beq.n	8000d20 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000cfe:	4ba3      	ldr	r3, [pc, #652]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d04:	4aa1      	ldr	r2, [pc, #644]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d06:	f043 0304 	orr.w	r3, r3, #4
 8000d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d0e:	4b9f      	ldr	r3, [pc, #636]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d14:	4a9d      	ldr	r2, [pc, #628]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d1e:	e018      	b.n	8000d52 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d20:	4b9a      	ldr	r3, [pc, #616]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d26:	4a99      	ldr	r2, [pc, #612]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d30:	e00f      	b.n	8000d52 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d32:	4b96      	ldr	r3, [pc, #600]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d38:	4a94      	ldr	r2, [pc, #592]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d3a:	f023 0301 	bic.w	r3, r3, #1
 8000d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d42:	4b92      	ldr	r3, [pc, #584]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d48:	4a90      	ldr	r2, [pc, #576]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d4a:	f023 0304 	bic.w	r3, r3, #4
 8000d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d016      	beq.n	8000d88 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d5a:	f7ff fbb7 	bl	80004cc <HAL_GetTick>
 8000d5e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d60:	e00a      	b.n	8000d78 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d62:	f7ff fbb3 	bl	80004cc <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e15f      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d78:	4b84      	ldr	r3, [pc, #528]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0ed      	beq.n	8000d62 <HAL_RCC_OscConfig+0x5ea>
 8000d86:	e01d      	b.n	8000dc4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d88:	f7ff fba0 	bl	80004cc <HAL_GetTick>
 8000d8c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d8e:	e00a      	b.n	8000da6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d90:	f7ff fb9c 	bl	80004cc <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d901      	bls.n	8000da6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8000da2:	2303      	movs	r3, #3
 8000da4:	e148      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000da6:	4b79      	ldr	r3, [pc, #484]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ed      	bne.n	8000d90 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8000db4:	4b75      	ldr	r3, [pc, #468]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dba:	4a74      	ldr	r2, [pc, #464]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dcc:	4b6f      	ldr	r3, [pc, #444]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	4a6e      	ldr	r2, [pc, #440]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d03c      	beq.n	8000e5e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d01c      	beq.n	8000e26 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000dec:	4b67      	ldr	r3, [pc, #412]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000df2:	4a66      	ldr	r2, [pc, #408]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fb66 	bl	80004cc <HAL_GetTick>
 8000e00:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e04:	f7ff fb62 	bl	80004cc <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e110      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000e16:	4b5d      	ldr	r3, [pc, #372]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0ef      	beq.n	8000e04 <HAL_RCC_OscConfig+0x68c>
 8000e24:	e01b      	b.n	8000e5e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000e26:	4b59      	ldr	r3, [pc, #356]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e2c:	4a57      	ldr	r2, [pc, #348]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000e2e:	f023 0301 	bic.w	r3, r3, #1
 8000e32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e36:	f7ff fb49 	bl	80004cc <HAL_GetTick>
 8000e3a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e3e:	f7ff fb45 	bl	80004cc <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e0f3      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000e50:	4b4e      	ldr	r3, [pc, #312]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1ef      	bne.n	8000e3e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80e7 	beq.w	8001036 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	f040 80b7 	bne.w	8000fe0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000e72:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0203 	and.w	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d124      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e90:	3b01      	subs	r3, #1
 8000e92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d11b      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d113      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb2:	085b      	lsrs	r3, r3, #1
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d109      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	085b      	lsrs	r3, r3, #1
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d061      	beq.n	8000f94 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	2b0c      	cmp	r3, #12
 8000ed4:	d056      	beq.n	8000f84 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000ed6:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a2c      	ldr	r2, [pc, #176]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ee0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000ee2:	f7ff faf3 	bl	80004cc <HAL_GetTick>
 8000ee6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eea:	f7ff faef 	bl	80004cc <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e09d      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_RCC_OscConfig+0x818>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f18:	3a01      	subs	r2, #1
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	4311      	orrs	r1, r2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f22:	0212      	lsls	r2, r2, #8
 8000f24:	4311      	orrs	r1, r2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000f2a:	0852      	lsrs	r2, r2, #1
 8000f2c:	3a01      	subs	r2, #1
 8000f2e:	0552      	lsls	r2, r2, #21
 8000f30:	4311      	orrs	r1, r2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f36:	0852      	lsrs	r2, r2, #1
 8000f38:	3a01      	subs	r2, #1
 8000f3a:	0652      	lsls	r2, r2, #25
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	4913      	ldr	r1, [pc, #76]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a10      	ldr	r2, [pc, #64]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000f5c:	f7ff fab6 	bl	80004cc <HAL_GetTick>
 8000f60:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff fab2 	bl	80004cc <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e060      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_RCC_OscConfig+0x814>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f82:	e058      	b.n	8001036 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e057      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d14a      	bne.n	8001036 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000faa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	4a23      	ldr	r2, [pc, #140]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000fb8:	f7ff fa88 	bl	80004cc <HAL_GetTick>
 8000fbc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc0:	f7ff fa84 	bl	80004cc <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e032      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x848>
 8000fde:	e02a      	b.n	8001036 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	2b0c      	cmp	r3, #12
 8000fe4:	d025      	beq.n	8001032 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8000ff8:	f023 0303 	bic.w	r3, r3, #3
 8000ffc:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8001004:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001008:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100a:	f7ff fa5f 	bl	80004cc <HAL_GetTick>
 800100e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001012:	f7ff fa5b 	bl	80004cc <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e009      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_RCC_OscConfig+0x8c8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f0      	bne.n	8001012 <HAL_RCC_OscConfig+0x89a>
 8001030:	e001      	b.n	8001036 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0c8      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001058:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d910      	bls.n	8001088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001066:	4b63      	ldr	r3, [pc, #396]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f023 0207 	bic.w	r2, r3, #7
 800106e:	4961      	ldr	r1, [pc, #388]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0b0      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d04c      	beq.n	800112e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d107      	bne.n	80010ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800109c:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d121      	bne.n	80010ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e09e      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d107      	bne.n	80010c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b4:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d115      	bne.n	80010ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e092      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d107      	bne.n	80010dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010cc:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d109      	bne.n	80010ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e086      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010dc:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e07e      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80010ec:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f023 0203 	bic.w	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	493f      	ldr	r1, [pc, #252]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010fe:	f7ff f9e5 	bl	80004cc <HAL_GetTick>
 8001102:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001104:	e00a      	b.n	800111c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001106:	f7ff f9e1 	bl	80004cc <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f241 3288 	movw	r2, #5000	; 0x1388
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e066      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 020c 	and.w	r2, r3, #12
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	429a      	cmp	r2, r3
 800112c:	d1eb      	bne.n	8001106 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	492c      	ldr	r1, [pc, #176]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d210      	bcs.n	800117c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 0207 	bic.w	r2, r3, #7
 8001162:	4924      	ldr	r1, [pc, #144]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_RCC_ClockConfig+0x1b0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e036      	b.n	80011ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4918      	ldr	r1, [pc, #96]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d009      	beq.n	80011ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4910      	ldr	r1, [pc, #64]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011ba:	f000 f825 	bl	8001208 <HAL_RCC_GetSysClockFreq>
 80011be:	4602      	mov	r2, r0
 80011c0:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <HAL_RCC_ClockConfig+0x1b4>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	490c      	ldr	r1, [pc, #48]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 80011cc:	5ccb      	ldrb	r3, [r1, r3]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f924 	bl	800042c <HAL_InitTick>
 80011e4:	4603      	mov	r3, r0
 80011e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80011e8:	7afb      	ldrb	r3, [r7, #11]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	08001450 	.word	0x08001450
 8001200:	20000000 	.word	0x20000000
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001216:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001220:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_GetSysClockFreq+0x34>
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b0c      	cmp	r3, #12
 8001234:	d121      	bne.n	800127a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d11e      	bne.n	800127a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d107      	bne.n	8001258 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001248:	4b31      	ldr	r3, [pc, #196]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 800124a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e005      	b.n	8001264 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001258:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001264:	4a2b      	ldr	r2, [pc, #172]	; (8001314 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10d      	bne.n	8001290 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001278:	e00a      	b.n	8001290 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d102      	bne.n	8001286 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <HAL_RCC_GetSysClockFreq+0x110>)
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	e004      	b.n	8001290 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d101      	bne.n	8001290 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_RCC_GetSysClockFreq+0x114>)
 800128e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2b0c      	cmp	r3, #12
 8001294:	d134      	bne.n	8001300 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d003      	beq.n	80012ae <HAL_RCC_GetSysClockFreq+0xa6>
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d003      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0xac>
 80012ac:	e005      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <HAL_RCC_GetSysClockFreq+0x110>)
 80012b0:	617b      	str	r3, [r7, #20]
      break;
 80012b2:	e005      	b.n	80012c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_RCC_GetSysClockFreq+0x114>)
 80012b6:	617b      	str	r3, [r7, #20]
      break;
 80012b8:	e002      	b.n	80012c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	617b      	str	r3, [r7, #20]
      break;
 80012be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	3301      	adds	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	fb02 f203 	mul.w	r2, r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_RCC_GetSysClockFreq+0x108>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	0e5b      	lsrs	r3, r3, #25
 80012ec:	f003 0303 	and.w	r3, r3, #3
 80012f0:	3301      	adds	r3, #1
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001300:	69bb      	ldr	r3, [r7, #24]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000
 8001314:	08001460 	.word	0x08001460
 8001318:	00f42400 	.word	0x00f42400
 800131c:	007a1200 	.word	0x007a1200

08001320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001338:	f7ff f9ba 	bl	80006b0 <HAL_PWREx_GetVoltageRange>
 800133c:	6178      	str	r0, [r7, #20]
 800133e:	e014      	b.n	800136a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134a:	6593      	str	r3, [r2, #88]	; 0x58
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001358:	f7ff f9aa 	bl	80006b0 <HAL_PWREx_GetVoltageRange>
 800135c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001368:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001370:	d10b      	bne.n	800138a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b80      	cmp	r3, #128	; 0x80
 8001376:	d919      	bls.n	80013ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2ba0      	cmp	r3, #160	; 0xa0
 800137c:	d902      	bls.n	8001384 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800137e:	2302      	movs	r3, #2
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	e013      	b.n	80013ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001384:	2301      	movs	r3, #1
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	e010      	b.n	80013ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b80      	cmp	r3, #128	; 0x80
 800138e:	d902      	bls.n	8001396 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	e00a      	b.n	80013ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b80      	cmp	r3, #128	; 0x80
 800139a:	d102      	bne.n	80013a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800139c:	2302      	movs	r3, #2
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	e004      	b.n	80013ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b70      	cmp	r3, #112	; 0x70
 80013a6:	d101      	bne.n	80013ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80013a8:	2301      	movs	r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 0207 	bic.w	r2, r3, #7
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d001      	beq.n	80013ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40022000 	.word	0x40022000

080013e0 <__libc_init_array>:
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	4d0d      	ldr	r5, [pc, #52]	; (8001418 <__libc_init_array+0x38>)
 80013e4:	4c0d      	ldr	r4, [pc, #52]	; (800141c <__libc_init_array+0x3c>)
 80013e6:	1b64      	subs	r4, r4, r5
 80013e8:	10a4      	asrs	r4, r4, #2
 80013ea:	2600      	movs	r6, #0
 80013ec:	42a6      	cmp	r6, r4
 80013ee:	d109      	bne.n	8001404 <__libc_init_array+0x24>
 80013f0:	4d0b      	ldr	r5, [pc, #44]	; (8001420 <__libc_init_array+0x40>)
 80013f2:	4c0c      	ldr	r4, [pc, #48]	; (8001424 <__libc_init_array+0x44>)
 80013f4:	f000 f820 	bl	8001438 <_init>
 80013f8:	1b64      	subs	r4, r4, r5
 80013fa:	10a4      	asrs	r4, r4, #2
 80013fc:	2600      	movs	r6, #0
 80013fe:	42a6      	cmp	r6, r4
 8001400:	d105      	bne.n	800140e <__libc_init_array+0x2e>
 8001402:	bd70      	pop	{r4, r5, r6, pc}
 8001404:	f855 3b04 	ldr.w	r3, [r5], #4
 8001408:	4798      	blx	r3
 800140a:	3601      	adds	r6, #1
 800140c:	e7ee      	b.n	80013ec <__libc_init_array+0xc>
 800140e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001412:	4798      	blx	r3
 8001414:	3601      	adds	r6, #1
 8001416:	e7f2      	b.n	80013fe <__libc_init_array+0x1e>
 8001418:	08001490 	.word	0x08001490
 800141c:	08001490 	.word	0x08001490
 8001420:	08001490 	.word	0x08001490
 8001424:	08001494 	.word	0x08001494

08001428 <memset>:
 8001428:	4402      	add	r2, r0
 800142a:	4603      	mov	r3, r0
 800142c:	4293      	cmp	r3, r2
 800142e:	d100      	bne.n	8001432 <memset+0xa>
 8001430:	4770      	bx	lr
 8001432:	f803 1b01 	strb.w	r1, [r3], #1
 8001436:	e7f9      	b.n	800142c <memset+0x4>

08001438 <_init>:
 8001438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143a:	bf00      	nop
 800143c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143e:	bc08      	pop	{r3}
 8001440:	469e      	mov	lr, r3
 8001442:	4770      	bx	lr

08001444 <_fini>:
 8001444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001446:	bf00      	nop
 8001448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800144a:	bc08      	pop	{r3}
 800144c:	469e      	mov	lr, r3
 800144e:	4770      	bx	lr
